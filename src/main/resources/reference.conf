akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at DEBUG level
      #receive = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      #autoreceive = on
      # enable DEBUG logging of actor lifecycle changes
      #lifecycle = on
    }
  }

  http {
    host-connection-pool {
      max-connections = 64
      max-open-requests = 2048
      pipelining-limit = 4
      max-retries = 2
      base-connection-backoff = 1s
      idle-timeout = 10min
    }

    client {
      idle-timeout = 10min
    }

    server {
      listen_ip : "0.0.0.0"
      listen_port: 8080

      request_log: true
      request_log: ${?REQUEST_LOG}
    }
  }
}

metrics {
  jvm = true
  # These are the metrics reporters
  reporters {
    Slf4j {
      # The name of the reporter class
      class = "com.featurefm.riversong.metrics.reporting.Slf4jReporter"
      # Is the reporter enabled
      enabled = off
      # What is the interval to report on
      reporting-interval = 10m
      # What is the logger
      logger = "com.featurefm.riversong.metrics"
    }
  }
}

health-check {
  use-in-status = false
  interval-seconds = 30
}

services {

  max-failures: 3
  call-timeout-ms: 2000
  reset-timeout-seconds: 5
  health-check-interval-seconds: 30

}

kafka {
  is-critical: true
}